volumes:
  os-data-01:
networks:
  os-net:
services:
  os-01:
    image: opensearchproject/opensearch:latest
    environment:
      - cluster.name=os-cluster # Name the cluster
      - node.name=os-01 # Name the node that will run in this container
      - discovery.seed_hosts=os-01 # Nodes to look for when discovering the cluster
      - cluster.initial_cluster_manager_nodes=os-01 # Nodes eligible to serve as cluster manager
      - bootstrap.memory_lock=true # Disable JVM heap memory swapping
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m" # Set min and max JVM heap sizes to at least 50% of system RAM
      - OPENSEARCH_INITIAL_ADMIN_PASSWORD=${OPENSEARCH_INITIAL_ADMIN_PASSWORD} # Sets the demo admin user password when using demo configuration, required for OpenSearch 2.12 and later
    ulimits:
      memlock:
        soft: -1 # Set memlock to unlimited (no soft or hard limit)
        hard: -1
      nofile:
        soft: 65536 # Maximum number of open files for the opensearch user - set to at least 65536
        hard: 65536
    volumes:
      - os-data-01:/usr/share/opensearch/data # Creates volume called opensearch-data1 and mounts it to the container
    ports:
      - ${OS_REST_PORT}:9200 # REST API
      - ${OS_ANALYTICS_PORT}:9600 # Performance Analyzer
    networks:
      - os-net # All of the containers will join the same Docker bridge network
  os-dashboards:
    image: opensearchproject/opensearch-dashboards:latest # Make sure the version of opensearch-dashboards matches the version of opensearch installed on other nodes
    ports:
      - ${OS_DASHBOARDS_PORT}:5601 # Map host port 5601 to container port 5601
    expose:
      - ${OS_DASHBOARDS_PORT} # Expose port 5601 for web access to OpenSearch Dashboards
    environment:
      OPENSEARCH_HOSTS: '["https://os-01:${OS_REST_PORT}"]' # Define the OpenSearch nodes that OpenSearch Dashboards will query
    networks:
      - os-net
